// *** Configurazione iniziale del sistema ***

// Questo file di configurazione memorizza i dati nel formato JSON
// I commenti come questo, assenti nel formato JSON puro, sono resi possibili dalle
// particolari caratteristiche del parser utilizzato dal programma (JsonCpp)

// Tutto deve essere contenuto in un blocco {..}
{
	// *** Interfaccia grafica ***
	
	// Posizione della telecamera rispetto al pianeta su cui è "ancorata" [dx, dy, dz]
	"camera" : [-3.538920e+11, -6.332323e+10, 1.927438e+11],
	// Orientamento della telecamera attorno all'asse passante per il centro dello schermo
	// Il valore deve essere in gradi sessagesimali
	"camera_roll" : -1.7,
	// Il numero del pianeta su cui è "ancorata" la telecamera (0..n-1)
	// Il valore -1 indica l'origine del sistema (coordinate [0,0,0])
	"camera_anchor" : 0,
	// Il numero di frame per secondo che si vuole raggiungere
	// Questo valore ripartisce il carico della cpu tra render grafico e simulazione fisica
	// Sono possibili anche valori decimali
	"fps_goal" : 40,
	// Indica al programma se visualizzare i nomi dei pianeti
	"show_label" : 1,
	
	
	// *** Visualizzazione del tracciato ***
	
	// Ogni quanti step della simulazione viene memorizzato un punto del tracciato
	// Ogni step della simulazione fa avanzare il sistema di "dt" secondi, e non corrisponde ai frame
	"path_step" : 2000,
	// Quanti punti del tracciato deve memorizzare per ogni pianeta
	"path_length" : 500,
	// Il numero del pianeta rispetto a cui sono relativi di default tutti i tracciati (0..n-1)
	// Il valore -1 indica l'origine del sistema (coordinate [0,0,0])
	"default_path_anchor" : 0,
	// Indica al programma se visualizzare i tracciati
	"show_path" : 1,
	
	// *** Parametri di simulazione ***
	
	// Il metodo usato per interpolare e quindi integrare l'accelerazione dei pianeti
    // Si veda il file src/integrator.cpp per una lista completa
	"method" : "rungekutta",
	// Il valore in secondi del parametro dt. Più è basso, più la simulazione è lenta e precisa
	"dt" : 30,
	// Indica al programma se compensare il movimento del centro di massa e azzerarlo (1=sì, 0=no)
	"delete_center_mass_movement" : 1,
	
	// *** Dati dei pianeti ***
	
	// Consiglio di utilizzare il servizio Horizons offerto dalla NASA:
	// http://ssd.jpl.nasa.gov/horizons.cgi
	// In tools/ c'è uno script bash che può agevolare l'inserimento dei dati
	
	// L'elenco dei pianeti (un array [..] di oggetti {..})
	"planets" : [
		{
			// Il nome del pianeta 
			"name" : "Sole",
			// La massa del pianeta (Kg)
			"mass" : 1.9891E+30,
			// Il raggio del pianeta (m)
			"radius" : 6.960E+8,
			// Il vettore posizione del pianeta [x,y,z] (m)
			"pos" : [-6.262781821541322E+8, 1.219718186047344E+8, 2.418529859727198E+6],
			// Il vettore velocità del pianeta [vx,vy,vz] (m/s)
			"vel" : [1.140302034765836E+0, -1.078621797736095E+1, -1.048575025858808E-8],
			// Il colore con cui verrà visualizzato il pianeta [rosso, verde, blu]
			// Ogni componente deve essere compresa tra 0 e 1
			"color" : [1, 1, 0]
		}
		, // Notare la virgola che separa l'elenco di pianeti
		{
			// Un secondo pianeta
			"name" : "Terra",
			"mass" : 5.9736E+24,
			"radius" : 6371010,
			"pos" : [1.798224753583152E+10, 1.461920205527395E+11, -2.023067095741630E+0],
			"vel" : [-3.003105303762372E+4, 3.630590000710148E+3, 1.016533406230646E-1],
			"color" : [0.1, 0.1, 0.9]
		}
		// ... eventuali altri pianeti
	]
}
